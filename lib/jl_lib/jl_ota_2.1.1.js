var t=require("./jl_rcsp_ota_2.1.1.js");const e="JLOTASDK";var s,i,n=1;function r(...t){n<=1&&null!=s&&s.logv(e,...t)}function a(...t){n<=3&&null!=s&&s.logi(e,...t)}function l(...t){n<=5&&null!=s&&s.loge(e,...t)}class h{}function o(t,e){let s="";switch(t){case h.ERROR_UNKNOWN:s="Unknown error.";break;case h.ERROR_NONE:s="Success";break;case h.ERROR_INVALID_PARAM:s="Invalid parameter.";break;case h.ERROR_DATA_FORMAT:s="Data formatting error.";break;case h.ERROR_NOT_FOUND_RESOURCE:s="No resources found.";break;case h.ERROR_UNKNOWN_DEVICE:s="Unknown device.";break;case h.ERROR_DEVICE_OFFLINE:s="Device went offline.";break;case h.ERROR_IO_EXCEPTION:s="I/O exceptions occur.";break;case h.ERROR_REPEAT_STATUS:s="Repeat state.";break;case h.ERROR_RESPONSE_TIMEOUT:s="Waiting for reply command timed out.";break;case h.ERROR_REPLY_BAD_STATUS:s="Device returned a bad status.";break;case h.ERROR_REPLY_BAD_RESULT:s="Device returned an error result.";break;case h.ERROR_NONE_PARSER:s="There is no associated parser.";break;case h.ERROR_OTA_LOW_POWER:s="Low power of equipment.";break;case h.ERROR_OTA_UPDATE_FILE:s="Upgrading firmware information is error.";break;case h.ERROR_OTA_FIRMWARE_VERSION_NO_CHANGE:s="Upgrade File version must be consistent with the firmware version.";break;case h.ERROR_OTA_TWS_NOT_CONNECT:s="TWS is disconnect.";break;case h.ERROR_OTA_HEADSET_NOT_IN_CHARGING_BIN:s="The earphone is not in the charging bin.";break;case h.ERROR_OTA_DATA_CHECK_ERROR:s="Check upgrade data error.";break;case h.ERROR_OTA_FAIL:s="ota failed.";break;case h.ERROR_OTA_ENCRYPTED_KEY_NOT_MATCH:s="The encryption key does not match";break;case h.ERROR_OTA_UPGRADE_FILE_ERROR:s="The upgrade file is damaged.";break;case h.ERROR_OTA_UPGRADE_TYPE_ERROR:s="Upgrade type error.";break;case h.ERROR_OTA_LENGTH_OVER:s="A length error occurred during upgrade.";break;case h.ERROR_OTA_FLASH_IO_EXCEPTION:s="Flash read/write errors occur.";break;case h.ERROR_OTA_CMD_TIMEOUT:s="Device timed out waiting for a command.";break;case h.ERROR_OTA_IN_PROGRESS:s="OTA is in progress.";break;case h.ERROR_OTA_COMMAND_TIMEOUT:s="SDK timed out waiting for a command.";break;case h.ERROR_OTA_RECONNECT_DEVICE_TIMEOUT:s="Waiting for reconnect device timeout.";break;case h.ERROR_OTA_USE_CANCEL:s="Canceling the upgrade";break;case h.ERROR_OTA_SAME_FILE:s="Same upgrade file."}return null==e||0==e.length?s:s+"\n"+e}h.ERROR_UNKNOWN=-1,h.ERROR_NONE=0,h.ERROR_INVALID_PARAM=-2,h.ERROR_DATA_FORMAT=-3,h.ERROR_NOT_FOUND_RESOURCE=-4,h.ERROR_UNKNOWN_DEVICE=-32,h.ERROR_DEVICE_OFFLINE=-33,h.ERROR_IO_EXCEPTION=-35,h.ERROR_REPEAT_STATUS=-36,h.ERROR_RESPONSE_TIMEOUT=-64,h.ERROR_REPLY_BAD_STATUS=-65,h.ERROR_REPLY_BAD_RESULT=-66,h.ERROR_NONE_PARSER=-67,h.ERROR_OTA_LOW_POWER=-97,h.ERROR_OTA_UPDATE_FILE=-98,h.ERROR_OTA_FIRMWARE_VERSION_NO_CHANGE=-99,h.ERROR_OTA_TWS_NOT_CONNECT=-100,h.ERROR_OTA_HEADSET_NOT_IN_CHARGING_BIN=-101,h.ERROR_OTA_DATA_CHECK_ERROR=-102,h.ERROR_OTA_FAIL=-103,h.ERROR_OTA_ENCRYPTED_KEY_NOT_MATCH=-104,h.ERROR_OTA_UPGRADE_FILE_ERROR=-105,h.ERROR_OTA_UPGRADE_TYPE_ERROR=-106,h.ERROR_OTA_LENGTH_OVER=-107,h.ERROR_OTA_FLASH_IO_EXCEPTION=-108,h.ERROR_OTA_CMD_TIMEOUT=-109,h.ERROR_OTA_IN_PROGRESS=-110,h.ERROR_OTA_COMMAND_TIMEOUT=-111,h.ERROR_OTA_RECONNECT_DEVICE_TIMEOUT=-112,h.ERROR_OTA_USE_CANCEL=-113,h.ERROR_OTA_SAME_FILE=-114,exports.UpgradeType=void 0,(i=exports.UpgradeType||(exports.UpgradeType={}))[i.UPGRADE_TYPE_UNKNOWN=-1]="UPGRADE_TYPE_UNKNOWN",i[i.UPGRADE_TYPE_CHECK_FILE=0]="UPGRADE_TYPE_CHECK_FILE",i[i.UPGRADE_TYPE_FIRMWARE=1]="UPGRADE_TYPE_FIRMWARE";class c{constructor(t,e){this.offset=0,this.len=0,null!=t&&(this.offset=t),null!=e&&(this.len=e)}toString(){return"FileOffset{offset="+this.offset+", len="+this.len+"}"}}class u{constructor(){this.communicationWay=u.COMMUNICATION_WAY_BLE,this.isSupportNewRebootWay=!1}toString(){return"OTAConfig{communicationWay="+this.communicationWay+", isSupportNewRebootWay="+this.isSupportNewRebootWay+", updateFileDataSize="+this.updateFileData?.length+"}"}}u.COMMUNICATION_WAY_BLE=0,u.COMMUNICATION_WAY_SPP=1,u.COMMUNICATION_WAY_USB=2;class d{copy(){const t=new d;return t.deviceBleMac=this.deviceBleMac,t.isSupportNewReconnectADV=this.isSupportNewReconnectADV,t}toString(){return"ReConnectMsg{ isSupportNewReconnectADV="+this.isSupportNewReconnectADV+"}"}}class p{constructor(t,e,s){this.isSupportDoubleBackup=!1,this.isNeedBootLoader=!1,this.isMandatoryUpgrade=!1,this.isSupportDoubleBackup=t,this.isNeedBootLoader=e,this.isMandatoryUpgrade=s}}class f{release(){this.callback=null}onStartOTA(){this.cbUpgradeEvent({onCallback:t=>{t.onStartOTA()}})}onNeedReconnect(t){this.cbUpgradeEvent({onCallback:e=>{e.onNeedReconnect(t)}})}onProgress(t,e){this.cbUpgradeEvent({onCallback:s=>{s.onProgress(t,e)}})}onStopOTA(){this.cbUpgradeEvent({onCallback:t=>{t.onStopOTA()}})}onCancelOTA(){this.cbUpgradeEvent({onCallback:t=>{t.onCancelOTA()}})}onError(t,e){this.cbUpgradeEvent({onCallback:s=>{s.onError(t,e)}})}cbUpgradeEvent(t){null!=this.callback&&t.onCallback(this.callback)}}class k{constructor(t){this.t=null,this.i=0,this.l=0,this.h=null,this.o=null,this.u=null,this.p=void 0,this.k=null,this.T=null,this.R=null,this.A=t,this.m=new f}release(){l("release >>> OTA"),this.isOTA()&&(this.cancelOTA(),this.v(null)),this.O(),this.m.release()}isOTA(){return null!=this.h}startOTA(t,e){if(null==t||null==t.updateFileData||null!=t.updateFileData&&0==t.updateFileData.length){const t=h.ERROR_INVALID_PARAM;null!=e&&e.onError(t,o(t,""))}else if(this.A.isDeviceConnected())if(this.isOTA()){const t=h.ERROR_OTA_IN_PROGRESS;null!=e&&e.onError(t,o(t,"OTA is in progress. Please stop ota at first."))}else this.v(t),this.m.callback=e,this._(),null!=t.updateFileData&&t.updateFileData.length>0?this.C(t.updateFileData):this.D(h.ERROR_OTA_UPGRADE_FILE_ERROR,"startOTA : updateFileData is null or size is 0");else{const t=h.ERROR_DEVICE_OFFLINE;null!=e&&e.onError(t,o(t,""))}}cancelOTA(){if(this.U("cancelOTA"))return!1;if(!this.A.isDeviceConnected()){const t=h.ERROR_DEVICE_OFFLINE;return this.D(t,o(t,"")),!1}if(null!=this.u&&this.u.isSupportDoubleBackup){const t=this,e={onResult(){t.S()},onError(e,s){e==h.ERROR_REPLY_BAD_STATUS||e==h.ERROR_REPLY_BAD_RESULT?t.D(e,s):t.S()}};return this.A.exitUpdateMode(e),!0}return l("cancelOTA : device is single flash ota, so ota progress cannot be interrupted."),!1}onDeviceInit(t,e){e&&null!=t&&(this.u=t),this.isOTA()&&null!=this.T&&(e&&null!=t?(this.F(),t.isMandatoryUpgrade?(this.I(exports.UpgradeType.UPGRADE_TYPE_FIRMWARE,0),this.N()):this.q()):this.D(h.ERROR_IO_EXCEPTION,o(h.ERROR_IO_EXCEPTION,"init device failed.")))}onDeviceDisconnect(){this.isOTA()&&(null!=this.o?(a("device is offline. ready to reconnect device"),this.M(),null==this.T&&this.P(300)):this.D(h.ERROR_DEVICE_OFFLINE,o(h.ERROR_DEVICE_OFFLINE,"")))}notifyUpgradeSize(t,e){l("设备通知文件大小,totalSize : "+t+" currentSize: "+e),this.i=t,this.l=e,this.W(this.L(t,e))}gainFileBlock(t,e){this.V();const s=this.B(t,e),i=this,n={onResult(){if(0==t&&0==e)i.G();else{if(i.i>0){let t=i.l;t+=e,i.l=t,i.W(i.L(i.i,i.l))}i.J()}},onError(t,e){i.D(t,e)}};this.A.receiveFileBlock(t,e,s,n)}setDeviceBLEMac(t){this.p=t}v(t){this.h=t}C(t){if(this.t=t,this.A.isDeviceConnected())this.K();else{const t=h.ERROR_DEVICE_OFFLINE;this.D(t,o(t,""))}}K(){if(this.U("_readUpgradeFileFlag"))return;const t=this,e={onResult(e){let s;if(0==e.offset&&0==e.len){s=new Uint8Array(1);const e=t.h?.communicationWay;s[0]=null!=e?e:0}else s=t.B(e.offset,e.len);0!=s.length?t.Y(s):this.onError(h.ERROR_INVALID_PARAM,"Read Data over Limit. offset = "+e.offset+", len = "+e.len)},onError(e,s){t.D(e,s)}};t.A.readUpgradeFileFlag(e)}Y(t){if(this.U("_inquiryDeviceCanOTA"))return;a("inquiryDeviceCanOTA : >>>>>>>>>>>>");const e=this,s={onResult(t){if(a("inquiryDeviceCanOTA : onResult :  result = "+t),t==T.j)return void e.H();let s,i="";switch(t){case T.X:s=h.ERROR_OTA_LOW_POWER;break;case T.Z:s=h.ERROR_OTA_UPDATE_FILE;break;case T.$:s=h.ERROR_OTA_FIRMWARE_VERSION_NO_CHANGE;break;case T.tt:s=h.ERROR_OTA_TWS_NOT_CONNECT;break;case T.et:s=h.ERROR_OTA_HEADSET_NOT_IN_CHARGING_BIN;break;default:s=h.ERROR_UNKNOWN,i=""+t}this.onError(s,o(s,i))},onError(t,s){e.D(t,s)}};e.A.inquiryDeviceCanOTA(t,s)}H(){this.U("_checkUpdateEnvironment")||(null!=this.u?this.u.isSupportDoubleBackup?(this.st(null),this.N()):this.u.isNeedBootLoader?(this.A.changeReceiveMtu(),this.J()):this.u.isMandatoryUpgrade?this.N():this.it():this.D(h.ERROR_DEVICE_OFFLINE,o(h.ERROR_DEVICE_OFFLINE,"")))}B(t,e){if(null!=this.t&&this.t.length>0&&t+e<=this.t.length){const s=new Uint8Array(e);return s.set(this.t.slice(t,t+e)),s}return new Uint8Array(0)}G(){if(this.U("queryUpdateResult"))return;a("queryUpdateResult : >>>>>>>>>>>>");const t=this,e={onResult(e){a("queryUpdateResult : onResult :  result = "+e);let s=0,i="";switch(e){case b.nt:return t.A.rebootDevice(null),t.v(null),t.O(),void setTimeout((()=>{t.q()}),100);case b.rt:return void t.it();case b.lt:s=h.ERROR_OTA_DATA_CHECK_ERROR;break;case b.ht:s=h.ERROR_OTA_FAIL;break;case b.ot:s=h.ERROR_OTA_ENCRYPTED_KEY_NOT_MATCH;break;case b.ct:s=h.ERROR_OTA_UPGRADE_FILE_ERROR;break;case b.ut:s=h.ERROR_OTA_UPGRADE_TYPE_ERROR;break;case b.dt:s=h.ERROR_OTA_LENGTH_OVER;break;case b.ft:s=h.ERROR_OTA_FLASH_IO_EXCEPTION;break;case b.kt:s=h.ERROR_OTA_CMD_TIMEOUT;break;case b.Tt:s=h.ERROR_OTA_SAME_FILE;break;default:s=h.ERROR_UNKNOWN,i=""+e}this.onError(s,o(s,i))},onError(e,s){t.D(e,s)}};this.A.queryUpdateResult(e)}N(){if(this.U("enterUpdateMode"))return;const t=this,e={onResult(e){if(0==e)t.J();else{const t=h.ERROR_REPLY_BAD_RESULT;this.onError(t,o(t,""+e))}},onError(e,s){t.D(e,s)}};this.A.enterUpdateMode(e)}it(){if(this.U("readyToReconnectDevice"))return;if(null==this.h)return void this.D(h.ERROR_OTA_FAIL," readyToReconnectDevice found OTACofig is null");const t=new d;t.deviceBleMac=this.p,this.st(t),this.P(k.WAITING_DEVICE_OFFLINE_TIMEOUT);const e=this,s={onResult(e){t.isSupportNewReconnectADV=0!=e},onError(t,s){t!=h.ERROR_REPLY_BAD_STATUS&&t!=h.ERROR_REPLY_BAD_RESULT||e.D(t,s)}};this.A.changeCommunicationWay(this.h.communicationWay,this.h.isSupportNewRebootWay,s)}U(t){return!this.isOTA()&&(l(t+": Ota progress has not started yet."),!0)}st(t){this.o=t}O(){this.i=0,this.l=0,this.st(null),this.bt()}bt(){this.F(),this.V(),this.M()}P(t){this.M();const e=this;this.R=setTimeout((()=>{if(this.R=null,l("MSG_WAIT_DEVICE_OFFLINE : timeout. isOTA = "+e.isOTA()+", "+e.o),null!=e.o&&e.isOTA()&&(l("MSG_RECONNECT_DEVICE : start reconnect >>>> isOTA = "+e.isOTA()+", "+e.o),e.isOTA()&&null!=e.o)){e.i=0,e.l=0;const t=e.o.copy();e.Rt(t),e.gt(t),e.st(null)}}),t)}M(){null!=this.R&&(clearTimeout(this.R),this.R=null)}J(){this.V(),this.k=setTimeout((()=>{if(this.k=null,this.isOTA()){const t=h.ERROR_OTA_COMMAND_TIMEOUT;this.D(t,o(t,""))}}),k.WAITING_CMD_TIMEOUT)}V(){null!=this.k&&(clearTimeout(this.k),this.k=null)}gt(t){this.F(),this.T=setTimeout((()=>{if(this.T=null,this.isOTA()){const t=h.ERROR_OTA_RECONNECT_DEVICE_TIMEOUT;this.D(t,o(t,""))}}),k.RECONNECT_DEVICE_TIMEOUT)}F(){null!=this.T&&(clearTimeout(this.T),this.T=null)}_(){this.m.onStartOTA()}W(t){const e=null==this.u||this.u.isNeedBootLoader?0:1;this.I(this.At(e),t)}I(t,e){this.m.onProgress(t,e)}Rt(t){this.m.onNeedReconnect(t)}q(){this.v(null),this.W(100),this.O(),l("_callbackOTAStop "),this.m.onStopOTA(),this.m.callback=null}S(){this.v(null),this.O(),l("_callbackOTACancel "),this.m.onCancelOTA(),this.m.callback=null}D(t,e){this.v(null),this.O(),l("callbackOTAError :  has an exception, code = "+function(t){let e;e=t<0?-t:t;const s=e.toString(16).toUpperCase();return""===s?"0x00":t<0?"-0x"+s:"0x"+s}(t)+", "+e),this.m.onError(t,e),this.m.callback=null}L(t,e){if(t<=0)return 0;let s=100*e/t;return s>=100&&(s=99.9),s}At(t){let e;switch(t){case 0:e=exports.UpgradeType.UPGRADE_TYPE_CHECK_FILE;break;case 1:e=exports.UpgradeType.UPGRADE_TYPE_FIRMWARE;break;default:e=exports.UpgradeType.UPGRADE_TYPE_UNKNOWN}return e}}k.WAITING_CMD_TIMEOUT=2e4,k.WAITING_DEVICE_OFFLINE_TIMEOUT=6e3,k.RECONNECT_DEVICE_DELAY=1e3,k.RECONNECT_DEVICE_TIMEOUT=8e4;class T{}T.j=0,T.X=1,T.Z=2,T.$=3,T.tt=4,T.et=5;class b{}b.nt=0,b.lt=1,b.ht=2,b.ot=3,b.ct=4,b.ut=5,b.dt=6,b.ft=7,b.kt=8,b.Tt=9,b.rt=128;class R{constructor(e){this.vt=new Array,this.Ot=k.WAITING_CMD_TIMEOUT,this.wt=!1,this._t=null,this.Ct=void 0,this.Dt=0,this.minSameCmdE5Time=50,this.yt=new k(this),this.Ut=e;const s=this;this.Et={onRcspInit(e,i){if(a("onRcspInit:1"+JSON.stringify(s._t)+" :device "+JSON.stringify(e)),null==e)return;if(null!=s._t&&!s._t.equals(e))return;const n=s.Ut.getDeviceInfo(e);let r;a("onRcspInit:2"+JSON.stringify(n)),null!=n&&(r=new p(n.isSupportDoubleBackup,n.isNeedBootLoader,n.mandatoryUpgradeFlag==t.CmdGetTargetInfo.FLAG_MANDATORY_UPGRADE)),s.yt.setDeviceBLEMac(n?.bleAddr),s.yt.onDeviceInit(r,i)},onRcspCommand(e,i){if(null!=e)if(i instanceof t.CmdReadFileBlock){const t=i,e=(new Date).getTime();if(t.getSn()==s.Ct&&e-s.Dt<s.minSameCmdE5Time)return;s.Ct=t.getSn(),s.Dt=e;const n=t.getParam().offset,r=t.getParam().len;s.xt(t),s.yt.gainFileBlock(n,r)}else if(i instanceof t.CmdNotifyUpdateFileSize){const n=i,r=n.getParam().totalSize,a=n.getParam().currentSize;s.yt.notifyUpgradeSize(r,a),null!=n.getResponse()&&(n.getResponse()?.setStatus(t.ResponseBase.STATUS_SUCCESS),n.getResponse()?.setSn(n.getSn()),n.setCommand(!1),s.Ut.sendRCSPCommand(e,n,s.Ot,new A("Response ",null)))}else if(i instanceof t.CmdNotifyADVInfo&&(r("onRcspCommand : 设备广播ADV信息"),!s.wt)){const i=new t.CmdControlADVStream(t.CmdControlADVStream.CTRL_OP_CLOSE);s.Ut.sendRCSPCommand(e,i,s.Ot,new A("stopNotifyADV",null)),s.wt=!0}},onRcspDataCmd(t,e){},onConnectStateChange(e,i){null!=e&&i==t.Connection.CONNECTION_DISCONNECT&&s.yt.onDeviceDisconnect()},onRcspError(t,e,s){},onMandatoryUpgrade(t){},onRcspResponse(t,e){}},e.addOnRcspCallback(this.Et)}getOTAImpl(){return this.yt}updateRcspOpImpl(e){this.Ut=e,e.addOnRcspCallback(this.Et);const s=this.Ut.getUsingDevice();if(this.setOTADevice(s),null!=s){const e=this.Ut.getDeviceInfo(s);if(null!=e){const s=new p(e.isSupportDoubleBackup,e.isNeedBootLoader,e.mandatoryUpgradeFlag==t.CmdGetTargetInfo.FLAG_MANDATORY_UPGRADE);this.yt.onDeviceInit(s,!0)}}}startOTA(t,e){this._t=this.Ut.getUsingDevice(),null!=this._t&&this.yt.setDeviceBLEMac(this.Ut.getDeviceInfo(this._t)?.bleAddr),this.Ct=void 0,this.yt.startOTA(t,e)}cancelOTA(){this.yt.cancelOTA()}getOTADevice(){return this._t}setOTADevice(t){this._t=t}release(){this.yt.release(),this.Ut.removeOnRcspCallback(this.Et)}isDeviceConnected(){return this.Ut.isDeviceConnected()&&null!=this._t&&this._t.equals(this.Ut.getUsingDevice())}changeCommunicationWay(e,s,i){if(!this.isDeviceConnected())return;const n=new t.ParamCommunicationWay(e,s),r=new g("changeCommunicationWay",i,{hasResult:()=>0,handleResult:(t,e)=>e.getResponse()?.result});this.Ut.sendRCSPCommand(this._t,new t.CmdChangeCommunicationWay(n),this.Ot,r)}readUpgradeFileFlag(e){if(!this.isDeviceConnected())return;const s=new g("readUpgradeFileFlag",e,{hasResult:()=>0,handleResult:(t,e)=>new c(e.getResponse()?.offset,e.getResponse()?.len)});this.Ut.sendRCSPCommand(this._t,new t.CmdReadFileOffset,this.Ot,s)}inquiryDeviceCanOTA(e,s){if(!this.isDeviceConnected())return;const i=new t.CmdRequestUpdate(new t.ParamRequestUpdate(e)),n=new g("inquiryDeviceCanOTA",s,{hasResult:()=>0,handleResult:(t,e)=>e.getResponse()?.result});this.Ut.sendRCSPCommand(this._t,i,this.Ot,n)}changeReceiveMtu(){if(!this.isDeviceConnected())return;const e=this.Ut.getDeviceInfo(this._t);null!=e&&e.receiveMtu<t.RcspConstant.DEFAULT_PROTOCOL_MTU&&(e.receiveMtu=t.RcspConstant.DEFAULT_PROTOCOL_MTU,this.Ut.getDeviceInfoManager().updateDeviceInfo(this._t,e))}enterUpdateMode(e){if(!this.isDeviceConnected())return;const s=new t.CmdEnterUpdateMode,i=new g("enterUpdateMode",e,{hasResult:()=>0,handleResult:(t,e)=>e.getResponse()?.result});this.Ut.sendRCSPCommand(this._t,s,this.Ot,i)}exitUpdateMode(e){if(!this.isDeviceConnected())return;const s=new t.CmdExitUpdateMode,i=new g("exitUpdateMode",e,{hasResult:()=>0,handleResult:(t,e)=>e.getResponse()?.result});this.Ut.sendRCSPCommand(this._t,s,this.Ot,i)}queryUpdateResult(e){if(!this.isDeviceConnected())return;const s=new t.CmdQueryUpdateResult,i=new g("queryUpdateResult",e,{hasResult:()=>0,handleResult:(t,e)=>e.getResponse()?.result});this.Ut.sendRCSPCommand(this._t,s,this.Ot,i)}rebootDevice(e){if(!this.isDeviceConnected())return;const s=new t.CmdRebootDevice(new t.ParamRebootDevice(t.ParamRebootDevice.OP_REBOOT)),i=new A("rebootDevice",e);this.Ut.sendRCSPCommand(this._t,s,this.Ot,i)}stopNotifyADV(e){if(!this.isDeviceConnected())return;const s=new t.CmdControlADVStream(t.CmdControlADVStream.CTRL_OP_CLOSE),i=new A("stopNotifyADV",e);this.Ut.sendRCSPCommand(this._t,s,this.Ot,i)}receiveFileBlock(e,s,i,n){if(!this.isDeviceConnected())return;const r=this.St(e,s);if(null==r)return;let a=t.ResponseResult.STATUS_SUCCESS;0==i.length&&e>0&&s>0&&(a=t.ResponseResult.STATUS_INVALID_PARAM);const l=r.getResponse();null!=l&&(l.setSn(r.getSn()),l.block=i,l.setStatus(a),r.setCommand(!1));const h=new A("receiveFileBlock",n);this.Ut.sendRCSPCommand(this._t,r,this.Ot,h)}St(t,e){for(let s=0;s<this.vt.length;s++){const i=this.vt[s];if(i.getParam().offset==t&&i.getParam().len==e)return this.vt.splice(s,1),i}return null}xt(t){this.vt.push(t)}}class g{constructor(t,e,s){null==s&&l("IHandleResult is null."),this.funcName=t,this.callback=e,this.handle=s}onCmdResponse(e,s){let i,n;if(s.getStatus()==t.ResponseBase.STATUS_SUCCESS){const r=this.handle.hasResult(e,s);if(0==r){const t=this.handle.handleResult(e,s);return void this.callback?.onResult(t)}i=t.ErrorCode.ERROR_REPLY_BAD_RESULT,n=""+r}else i=t.ErrorCode.ERROR_REPLY_BAD_STATUS,n=""+s.getStatus();this.onError(e,i,t.ErrorCode.getErrorDesc2(i,n))}onError(t,e,s){s=this.funcName+":"+s,this.callback?.onError(e,s)}}class A extends g{constructor(t,e){super(t,e,{hasResult:()=>0,handleResult:()=>!0})}}exports.FileOffset=c,exports.OTAConfig=u,exports.OTAError=h,exports.OTAImpl=k,exports.RcspOTAManager=class{constructor(e){if(this.Ut=e,this.Ft=new R(this.Ut),this.yt=this.Ft.getOTAImpl(),null!=e){const e=this.Ut.getUsingDevice();if(null!=e){const s=this.Ut.getDeviceInfo(e);if(null!=s){const e=new p(s.isSupportDoubleBackup,s.isNeedBootLoader,s.mandatoryUpgradeFlag==t.CmdGetTargetInfo.FLAG_MANDATORY_UPGRADE);this.yt.onDeviceInit(e,!0)}}}}release(){this.Ft.release()}startOTA(t,e){this.Ft.startOTA(t,e)}cancelOTA(){this.Ft.cancelOTA()}isOTA(){return this.Ft.getOTAImpl().isOTA()}getCurrentOTADevice(){return this.Ft.getOTADevice()}updateRcspOpImpl(t){return this.Ft.updateRcspOpImpl(t)}},exports.ReConnectMsg=d,exports.ab2hex=function(t){if(t){return Array.prototype.map.call(new Uint8Array(t),(function(t){return("00"+t.toString(16)).slice(-2)})).join("")}return""},exports.getErrorDesc=o,exports.logd=function(...t){n<=2&&null!=s&&s.logd(e,...t)},exports.loge=l,exports.logi=a,exports.logv=r,exports.logw=function(...t){n<=4&&null!=s&&s.logw(e,...t)},exports.setLogGrade=function(t){n=t},exports.setLogger=function(t){s=t};
